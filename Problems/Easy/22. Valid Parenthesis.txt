class Solution {
    public boolean isValid(String s) {
        if(s.length() % 2 != 0) return false;
        //Need to loop thru. \
        Stack<Character> stack = new Stack();
        for(char c: s.toCharArray()){

            //push the character onto the stack, and if the stack is not empty, peek to see if prev is matching set. 
            if(c == '(' || c == '{' || c== '['){
                stack.push(c);
            } else if( c == ')' && !stack.isEmpty() && stack.peek() == '('){
                stack.pop();
            }else if( c == '}' && !stack.isEmpty() && stack.peek() == '{'){
                stack.pop();
            }else if( c == ']' && !stack.isEmpty() && stack.peek() == '['){
                stack.pop();
            } else {return false;}
        }
        return stack.isEmpty();
        //must have even number of characters for it to be closed.
        

    }
}